name:  Continuous Build / Test

on:
  push:
    branches:
      - master
      - pre-prod

env:
  IMAGE:  gram-parser-workbench
  rg:  gram-parser

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.x
    # Declare the target environment where to deploy container image
    - name: Declare name of environment
      id:  environment-name
      run: |
        branch=$(echo "${GITHUB_REF#refs/heads/}")
        echo "Current branch is '$branch'"
        if [ "$branch" = "master" ]
        then
          targetEnv="dev"
        else
          targetEnv="$branch"
        fi
        echo "Export target environment (targetEnv) '$targetEnv'"
        echo "##[set-output name=targetEnv;]$targetEnv"
    # Patch the version of the library package with this run number
    - name: Patch version
      id:  patch-version
      run: python3 deployment/patch-version.py code/GramParserLib/GramParserLib.csproj ${{ github.run_number }} false
    # See https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-restore
    - name: Install dependencies
      run: dotnet restore code
    # See https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-build
    - name: Build
      run: dotnet build code --configuration Release --no-restore
    # See https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-test
    - name: Test
      run: dotnet test code --configuration Release --no-restore --verbosity normal
    # See https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-publish
    - name: .NET Publish Web App
      run: dotnet publish code/GramParserWorkbench --configuration Release --no-restore --output workbench-pack

    # Docker stuff
    # See https://docs.docker.com/engine/reference/commandline/login/
    - name:  Docker Login
      run:  docker login -u ${{ secrets.docker_login }} -p ${{ secrets.docker_token }}
    # See https://docs.docker.com/engine/reference/commandline/build/
    - name:  Docker Build
      run:  docker build --file code/Dockerfile --tag ${{ secrets.docker_repo }}/$IMAGE:${{ steps.patch-version.outputs.full-version }} workbench-pack
    # See https://docs.docker.com/engine/reference/commandline/push/
    - name:  Docker Push ${{ steps.patch-version.outputs.full-version }}
      run:  docker push ${{ secrets.docker_repo }}/$IMAGE:${{ steps.patch-version.outputs.full-version }}
    # See https://docs.docker.com/engine/reference/commandline/tag/
    - name:  Docker Tag with the target environment
      run:  docker tag ${{ secrets.docker_repo }}/$IMAGE:${{ steps.patch-version.outputs.full-version }} ${{ secrets.docker_repo }}/$IMAGE:${{ steps.environment-name.outputs.targetEnv }}
    - name:  Docker Push target environment
      run:  docker push ${{ secrets.docker_repo }}/$IMAGE:${{ steps.environment-name.outputs.targetEnv }}

    # Restart web site logic
    # Login
    - name: Azure Login
      run: az login --service-principal -u ${{ secrets.sp_id }} -p ${{ secrets.sp_secret }} --tenant ${{ secrets.tenant_id }}
    # Restart web site
    - name: Restart web site
      run:  |
        targetEnv=${{ steps.environment-name.outputs.targetEnv }}
        echo "Target environment:  '$targetEnv'"
        name=$(az webapp list -g $rg -o tsv --query "[?tags.targetEnv=='$targetEnv'].name")
        echo "Name of webapp:  '$name'"
        az webapp restart --name $name -g $rg