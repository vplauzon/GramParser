#	Comments & interleaves
rule(interleave=false) comment = "#" (. - ("\r" | "\n"))*;
interleave = (" " | "\r" | "\n" | "\t") | comment;

#	tokens
rule(interleave=false, children=false) identifier = ("a".."z" | "A".."Z" | "0".."9")+;
rule(interleave=false, children=false) number = ("0".."9")+;
rule(interleave=false) character = normal::(. - ("\"" | "\r" | "\n" | "\\"))
	| escapeQuote::("\\" "\"") | escapeBackslash::"\\\\"
	| escapeLetter:("\\" l::("n" | "r" | "t" | "v"))
	| escapeHexa:("\\x" h::("0".."9" | "a".."f" | "A".."F"){1,2});
rule(interleave=false) quotedCharacter = "\"" c:character "\"";
rule(interleave=false) quotedString = "\"" c:character* "\"";

#	rules
rule(interleave=false) noChildrenTag = id:(identifier)? "::";
rule(interleave=false) withChildrenTag = id:(identifier)? ":";
rule(interleave=false) noTag = "";
rule(interleave=false) tag = noChildrenTag:noChildrenTag | withChildrenTag:withChildrenTag
	| noTag:noTag;
rule(interleave=false) literal = "\"" l:character* "\"";
rule(interleave=false, children=false) any = ".";
rule(interleave=false) range = lower:quotedCharacter ".." upper:quotedCharacter;
rule exactCardinality = "{" n:number "}";
rule minMaxCardinality = minmax:("{" min:number "," max:number "}")
	| min:("{" min:number "," "}")
	| max:("{" "," max:number "}");
rule cardinality = star:"*" | plus:"+" | question:"?" | exact:exactCardinality
	| minMax:minMaxCardinality;
rule bracket = "(" r:ruleBody ")";
rule repeatable = ruleRef:identifier | literal:literal | bracket | any:any;
rule repeat = rule:repeatable cardinality:cardinality;
rule disjunctionable = ruleRef:identifier | literal:literal | range:range | bracket
	| any:any | repeat:repeat;
rule disjunction = t:tag head:disjunctionable tail:("|" t:tag d:disjunctionable)+;
rule sequenceable = ruleRef:identifier | literal:literal | range:range | bracket:bracket
	| any:any | repeat:repeat;
rule sequence = (t:tag r:sequenceable){2,};
rule substractable = ruleRef:identifier | literal:literal | range:range
	| bracket:bracket | any:any | repeat:repeat;
rule substracted = ruleRef:identifier | literal:literal | range:range
	| bracket:bracket | repeat:repeat;
rule substract = primary:substractable "-" excluded:substracted;
rule(recursive=true) ruleBody = ruleRef:identifier | literal:literal | range:range
	| bracket:bracket | any:any | substract:substract | disjunction:disjunction | repeat:repeat
	| sequence:sequence;

rule outputResolution = id:identifier | string:quotedString;
rule outputDeclaration = "=>" output:outputResolution;

rule interleaveDeclaration = "interleave" "=" body:ruleBody ";";
rule boolean = true:"true" | false:"false";
rule parameterAssignation = id:identifier "=" value:boolean;
rule parameterAssignationList = "(" head:parameterAssignation
	tail:("," pa:parameterAssignation)* ")";
rule ruleDeclaration = "rule" params:parameterAssignationList?
	id:identifier "=" body:ruleBody ";" output:outputDeclaration?;
rule declaration = interleaveDeclaration:interleaveDeclaration
	| ruleDeclaration:ruleDeclaration;

#	main rule
rule main = declaration*;