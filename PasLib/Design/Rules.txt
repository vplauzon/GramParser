Composition rules:

any (matches anything, one character long):

	rule any = .

literal:

	rule lit = "Hi" -> { "rule" : "lit", "text" : "Hi" }

range:

	rule range = "a".."z" -> { "rule" : "range", "text" : "g" }

repeat:

	rule rep = ruleX{a,b} -> { "rule" : "rep", "text" : "tototototo" }
	rule rep = x::ruleX{a,b} ->	{
									"rule" : "rep",
									"fragments" :
									{
										"x" : 
										{
											"rule" : "ruleX",
											"text" : "tototo"
										}
									}
								}
	rule rep = x:ruleX{a,b} ->	{
									"rule" : "rep",
									"fragments" :
									{
										"x" : 
										{
											"rule" : "",
											"repeats" :
											[
												{
													"rule" : "ruleX",
													"text" : "to"
												},
												...
											]
										}
									}
								}

disjunction:

	rule dis = ruleX | ruleY -> { "rule" : "dis", "text" : "Hi" }
	rule dis = a:ruleX | b:ruleX -> { "rule" : "dis", "fragments": {"a" : {text:"Hi"}} }

sequence:

	rule seq = ruleX ruleY -> { "rule" : "seq", "text" : "Hi Bob" }
	rule = a:ruleX b:ruleY -> { "rule" : "seq", "fragments": {"a" : {"text":"Hi"}, "b": {"text":"Bob"}} }
	                       ->	{
									"rule" : "seq",
									"fragments" :
									{
										"a" : {"rule":"ruleX", "fragments":{"h":{...}, "vowel":{...}}},
										"b" : {"rule":"ruleY", "text":"Bob"}
									}
								}
substract:

	rule sub = ruleX - ruleY -> { "rule" : "sub", "text" : "Hi Bob" }
	rule sub = a:ruleX - ruleY ->	{
										"rule" : "sub",
										"fragments": {"a" : {"rule" :"ruleX", "text":"Hi Bob"}}
									}

interleave:

	interleave = (" " | "\r" | "\n" | "\t")+

exclude interleave:

	token myToken = ...