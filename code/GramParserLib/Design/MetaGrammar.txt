#	Comments & interleaves
rule(interleave=false) comment = "#" (. - ("\r" | "\n"))*;
interleave = (" " | "\r" | "\n" | "\t") | comment;

#	tokens
rule(interleave=false) identifier = ("a".."z" | "A".."Z") ("a".."z" | "A".."Z" | "0".."9")* => text;
rule(interleave=false) number = ("0".."9")+ => text;
rule(interleave=false) double = "-"? number* ("." number+)? => text;
rule(interleave=false) character = normal::(. - ("\"" | "\r" | "\n" | "\\"))
	| escapeSingleQuote::("\\" "'")
	| escapeDoubleQuote::("\\" '"')
	| escapeBackslash::"\\\\"
	| escapeLetter:("\\" l::("n" | "r" | "t" | "v"))
	| escapeHexa:("\\x" h::("0".."9" | "a".."f" | "A".."F"){2,2} => text);
rule(interleave=false) singleQuotedCharacter = "'" c:character "'";
rule(interleave=false) doubleQuotedCharacter = '"' c:character '"';
rule(interleave=false) quotedCharacter = singleQuotedCharacter | doubleQuotedCharacter;

#	rules
rule(interleave=false) withTag = id:(identifier) ":";
rule(interleave=false) noTag = "";
rule(interleave=false) tag = noChildrenTag:noChildrenTag | withTag:withTag;
rule(interleave=false) singleQuotedLiteral = "'" l:character* "'";
rule(interleave=false) doubleQuotedLiteral = '"' l:character* '"';
rule(interleave=false) literal = singleQuotedLiteral | doubleQuotedLiteral;
rule(interleave=false) any = ".";
rule(interleave=false) range = lower:quotedCharacter ".." upper:quotedCharacter;
rule exactCardinality = "{" n:number "}";
rule minMaxCardinality = minmax:("{" min:number "," max:number "}")
	| min:("{" min:number "," "}")
	| max:("{" "," max:number "}");
rule cardinality = star:"*" | plus:"+" | question:"?" | exact:exactCardinality
	| minMax:minMaxCardinality;
rule bracket = "(" r:ruleBodyOutput ")";
rule repeatable = ruleRef:identifier | literal:literal | bracket | any:any;
rule repeat = rule:repeatable cardinality:cardinality;
rule disjunctionable = ruleRef:identifier | literal:literal | range:range | bracket
	| any:any | repeat:repeat;
rule disjunction = t:tag head:disjunctionable tail:("|" t:tag d:disjunctionable)+;
rule sequenceable = ruleRef:identifier | literal:literal | range:range | bracket:bracket
	| any:any | repeat:repeat;
rule(interleave=false) innerSequenceable = t:tag r:sequenceable;
rule(interleave=false) tailSequenceable = interleave+ s:innerSequenceable;
rule(interleave=false) sequence = head:innerSequenceable tail:tailSequenceable+;
rule substractable = ruleRef:identifier | literal:literal | range:range
	| bracket:bracket | any:any | repeat:repeat;
rule substracted = ruleRef:identifier | literal:literal | range:range
	| bracket:bracket | repeat:repeat;
rule substract = primary:substractable "-" excluded:substracted;
rule ruleBody = ruleRef:identifier | literal:literal | range:range
	| bracket:bracket | any:any | substract:substract | disjunction:disjunction | repeat:repeat
	| sequence:sequence;

#	outputs
rule outputArrayList = head:outputBody tail:("," element:outputBody)*;
rule outputArray = "[" list:outputArrayList? "]";
rule outputObjectFieldKey = id::identifier | literal:literal;
rule outputObjectFieldPair = key:outputObjectFieldKey ":" value:outputBody;
rule outputObjectFieldList = head:outputObjectFieldPair tail:("," element:outputObjectFieldPair)*;
rule outputObject = "{" list:outputObjectFieldList? "}"
rule outputFunction = id::identifier "(" list::outputArrayList? ")";
rule(recursive=true) outputBody =
	id::identifier
	| literal:literal
	| number::double
	| array:outputArray
	| object:outputObject
	| function:outputFunction;
rule outputDeclaration = "=>" output:outputBody;
rule ruleBodyOutput = body:ruleBody output:outputDeclaration?;

#	rule declarations
rule interleaveDeclaration = "interleave" "=" body:ruleBody ";";
rule boolean = true:"true" | false:"false";
rule parameterAssignation = id:identifier "=" value:boolean;
rule parameterAssignationList = "(" head:parameterAssignation
	tail:("," pa:parameterAssignation)* ")";
rule ruleDeclaration = "rule" params:parameterAssignationList?
	id:identifier "=" rule:ruleBodyOutput ";";
rule declaration = interleaveDeclaration:interleaveDeclaration
	| ruleDeclaration:ruleDeclaration;

#	main rule
rule main = declaration*;